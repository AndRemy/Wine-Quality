isGood(redwine_df[4,])
apply(
X = redwine_df,
FUN = isGood,
MARGIN = 1
)
redwine_df$good <- apply(
X = redwine_df,
FUN = isGood,
MARGIN = 1
)
redwine_df[redwine_df$good > 0]
redwine_df[redwine_df$good > 0,"quality"]
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = redwine_df,
family = "binomial"
)
summary(logit_mod)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + residual.sugar + chlorides + total.sulfur.dioxide + density + sulphates + alcohol,
data = redwine_df,
family = "binomial"
)
summary(logit_mod)
library(caTools)
train_index <- sample.split(
Y          = redwine_df$good,
SplitRatio = 0.8
)
train_df <- redwine_df[train_index, ]
test_df  <- redwine_df[!train_index, ]
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = redwine_df,
family = "binomial"
)
summary(logit_mod)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + residual.sugar + chlorides + total.sulfur.dioxide + density + sulphates + alcohol,
data = redwine_df,
family = "binomial"
)
summary(logit_mod)
predict(
logit_mod,
newdata = test_df
)
predict(
object   = logit_mod,
newdata  = test_df,
response = "response"
)
logit_predict <- predict(
object   = logit_mod,
newdata  = test_df,
response = "response"
)
logit_predict[1]
-4.399088 / (1 - 4.399088)
View(test_df)
logit_predict[2]
-3.777047 / (1 - 3.777047)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + residual.sugar + chlorides + total.sulfur.dioxide + density + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
logit_predict <- predict(
object   = logit_mod,
newdata  = test_df,
response = "response"
)
logit_predict[1]
logit_predict <- predict(
object   = logit_mod,
newdata  = test_df,
response = "response"
)
logit_predict[1]
logit_predict[2]
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + residual.sugar + chlorides + total.sulfur.dioxide + density + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
logit_predict[2]
P <- -3.757264 / (1 + -3.757264)
P <- (-3.757264) / (1 + -3.757264)
P
logit_predict[1]
index <- 1
(logit_predict[index]) / (1 + logit_predict[index])
index <- 2
(logit_predict[index]) / (1 + logit_predict[index])
index <- 3
(logit_predict[index]) / (1 + logit_predict[index])
tree_mod <- rpart(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data    = train_df,
method  = "class"
)
rpart.plot(
tree_mod,
type = "1"
extra = "1"
)
rpart.plot(
tree_mod,
type = "1",
extra = "1"
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
cex   = 0.6
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
cex   = 0.5
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
cex   = 0.4
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
cex   = 0.45
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
tweak = 1.2
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
tweak = 1.5
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
tweak = 2
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
tweak = 4
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
tweak = 3.5
)
plotcp(tree_mod)
tree_mod <- rpart(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data    = train_df,
method  = "class",
cp      = 0.021
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
tweak = 3.5
)
tree_mod <- rpart(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data    = train_df,
method  = "class",
cp      = 0.021
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1
)
ggplot(
data = redwine_df,
aes(
y = redwine_df$alcohol
)
) + geom_boxplot()
ggplot_plot <- ggplot(
data = redwine_df,
aes(
y = redwine_df$alcohol
)
) + geom_boxplot()
library(plotly)
ggplotly(ggplot_plot)
ggplot_plot <- rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1
)
ggplotly(ggplot_plot)
ggplot_plot <- ggplot(
data = redwine_df,
aes(
y = redwine_df$alcohol
)
) + geom_boxplot()
library(plotly)
ggplotly(ggplot_plot)
isGood <- function(df, alcohol){
resultGood <- 0
if(df["quality"] > 6 && df["alcohol"] == alcohol){
resultGood <- 1
}
return(resultGood)
}
redwine_df$good <- apply(
X = redwine_df,
FUN = isGood,
MARGIN = 1
alcohol = 10
)
isGood <- function(df, alcohol){
resultGood <- 0
if(df["quality"] > 6 && df["alcohol"] == alcohol){
resultGood <- 1
}
return(resultGood)
}
redwine_df$good <- apply(
X       = redwine_df,
FUN     = isGood,
MARGIN  = 1,
alcohol = 10
)
isGood <- function(df, alcohol = 0){
resultGood <- 0
if(df["quality"] > 6){
resultGood <- 1
}
if(alcohol > 0){
if(df["alcohol"] != alcohol)
resultGood <- 0
}
return(resultGood)
}
redwine_df$good <- apply(
X       = redwine_df,
FUN     = isGood,
MARGIN  = 1,
alcohol = 10
)
library(caTools)
train_index <- sample.split(
Y          = redwine_df$good,
SplitRatio = 0.8
)
train_df <- redwine_df[train_index, ]
test_df  <- redwine_df[!train_index, ]
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + residual.sugar + chlorides + total.sulfur.dioxide + density + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
logit_predict <- predict(
object   = logit_mod,
newdata  = test_df,
response = "response"
)
library(rpart)
library(rpart.plot)
tree_mod <- rpart(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data    = train_df,
method  = "class"
)
plotcp(tree_mod)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1,
tweak = 3.5
)
tree_mod <- rpart(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data    = train_df,
method  = "class",
cp      = 0.021
)
rpart.plot(
x     = tree_mod,
type  = 1,
extra = 1
)
ggplot_plot <- ggplot(
data = redwine_df,
aes(
y = redwine_df$alcohol
)
) + geom_boxplot()
library(plotly)
ggplotly(ggplot_plot)
isGood <- function(df, quality = 7, alcohol = 0){
resultGood <- 0
if(df["quality"] >= quality){
resultGood <- 1
}
if(alcohol > 0){
if(df["alcohol"] != alcohol)
resultGood <- 0
}
return(resultGood)
}
redwine_df$good <- apply(
X       = redwine_df,
FUN     = isGood,
MARGIN  = 1,
quality = 6,
alcohol = 10
)
library(caTools)
train_index <- sample.split(
Y          = redwine_df$good,
SplitRatio = 0.8
)
train_df <- redwine_df[train_index, ]
test_df  <- redwine_df[!train_index, ]
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + residual.sugar + chlorides + total.sulfur.dioxide + density + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
redwine_df$good <- apply(
X       = redwine_df,
FUN     = isGood,
MARGIN  = 1,
quality = 6,
alcohol = 0
)
library(caTools)
train_index <- sample.split(
Y          = redwine_df$good,
SplitRatio = 0.8
)
train_df <- redwine_df[train_index, ]
test_df  <- redwine_df[!train_index, ]
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
redwine_df$good <- apply(
X       = redwine_df,
FUN     = isGood,
MARGIN  = 1,
quality = 7,
alcohol = 0
)
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
library(caTools)
train_index <- sample.split(
Y          = redwine_df$good,
SplitRatio = 0.8
)
train_df <- redwine_df[train_index, ]
test_df  <- redwine_df[!train_index, ]
logit_mod <- glm(
formula = good ~ fixed.acidity + volatile.acidity + citric.acid + residual.sugar + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + density + pH + sulphates + alcohol,
data = train_df,
family = "binomial"
)
summary(logit_mod)
shiny::runApp('wine_quality')
runApp('wine_quality')
?fluidPage
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
f
Q
runApp('wine_quality')
f
f
f
n
n
n
n
c
c
c
c
c
Q
runApp('wine_quality')
?sliderInput
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
?shinyUI
?fluidPage
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
library(shinydashboard)
install.packages("shinydashboard")
library(shinydashboard)
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
show.prp.palettes()
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
runApp('wine_quality')
